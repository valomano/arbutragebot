from fastapi import FastAPI, Depends, BackgroundTasks
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from sqlalchemy.orm import Session
from backend.database.db_connector import get_db
from backend.database.models import Price, ArbitrageSignal
import os

# üìÇ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
BASE_DIR = os.path.abspath(os.path.dirname(__file__))  # backend/
ROOT_DIR = os.path.abspath(os.path.join(BASE_DIR, ".."))  # htdocs/

print(f"üöÄ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ {ROOT_DIR}")

# üìÇ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# üìÇ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS)
app.mount("/static", StaticFiles(directory=os.path.join(ROOT_DIR, "frontend/static")), name="static")

# üìÇ –ü–æ–¥–∫–ª—é—á–∞–µ–º HTML-—à–∞–±–ª–æ–Ω—ã
TEMPLATES_DIR = os.path.join(ROOT_DIR, "frontend/templates")

# üìä –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (Dashboard)
@app.get("/")
async def root():
    return FileResponse(os.path.join(TEMPLATES_DIR, "dashboard.html"))

@app.get("/dashboard")
async def get_dashboard():
    return FileResponse(os.path.join(TEMPLATES_DIR, "dashboard.html"))

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–Ω
@app.get("/prices")
def get_prices(db: Session = Depends(get_db)):
    prices = db.query(Price).all()
    return {"data": prices}

# üìà –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞
@app.get("/price/{symbol}")
def get_price(symbol: str, db: Session = Depends(get_db)):
    price = db.query(Price).filter(Price.asset == symbol).first()
    if price:
        return {"symbol": symbol, "price": price.price, "exchange": price.exchange}
    return {"error": "Asset not found"}

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
@app.get("/arbitrage")
def get_arbitrage_signals(db: Session = Depends(get_db)):
    signals = db.query(ArbitrageSignal).all()
    return {"data": signals}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="localhost", port=8080, log_level="debug")
