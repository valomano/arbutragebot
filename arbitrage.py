from sqlalchemy.orm import Session
from backend.database.models import Price, ArbitrageSignal, OrderBook
from backend.core.liquidity_checker import check_liquidity, analyze_order_impact
from backend.core.risk_managment import check_risk
from backend.utils.logger import log_arbitrage
from sqlalchemy import and_
from datetime import datetime
import logging



MIN_SPREAD = 3.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ë–î

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="logs/arbitrage.log", level=logging.INFO, format="%(asctime)s - %(message)s")


def estimate_price_impact(db: Session, exchange: str, asset: str, order_type: str, amount_usdt: float) -> float:
    """
    üìâ –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–ª–∏—è–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ —Ü–µ–Ω—É (price impact).
    order_type: "buy" –∏–ª–∏ "sell"
    amount_usdt: —Å—É–º–º–∞ –≤ USDT
    """

    book = db.query(OrderBook).filter_by(exchange=exchange, asset=asset).first()
    if not book:
        return 100.0  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å—á–∏—Ç–∞–µ–º –±–æ–ª—å—à–æ–π —Ä–∏—Å–∫

    try:
        import ast
        side = ast.literal_eval(book.asks if order_type == "buy" else book.bids)
        if not side:
            return 100.0

        total_cost = 0.0
        acquired = 0.0

        for price_str, qty_str in side:
            price = float(price_str)
            qty = float(qty_str)
            max_buy = qty * price if order_type == "buy" else qty

            if order_type == "buy":
                if total_cost + max_buy < amount_usdt:
                    total_cost += max_buy
                    acquired += qty
                else:
                    needed = amount_usdt - total_cost
                    acquired += needed / price
                    break
            else:  # sell
                if acquired + qty < amount_usdt:
                    acquired += qty
                    total_cost += qty * price
                else:
                    total_cost += (amount_usdt - acquired) * price
                    break

        if acquired == 0:
            return 100.0

        market_price = float(side[0][0])
        average_price = total_cost / acquired
        impact = (average_price - market_price) / market_price * 100 if order_type == "buy" else \
                 (market_price - average_price) / market_price * 100
        return round(impact, 3)

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ price impact –¥–ª—è {exchange} {asset}: {e}")
        return 100.0



def find_arbitrage_opportunities(db: Session):
    analyze_order_impact(db)
  #  update_orderbooks(db)
    """üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–µ–Ω—ã –∏ –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."""
    try:
        prices = db.query(Price).all()

        price_map = {}
        for price in prices:
            if price.asset not in price_map:
                price_map[price.asset] = []
            price_map[price.asset].append((price.exchange, price.price))

        logging.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(price_map)} –∞–∫—Ç–∏–≤–æ–≤...")

        signals = []
        skipped_liquidity = 0
        skipped_risk = 0
        skipped_spread = 0
        updated_signals = 0
        deleted_signals = 0
        skipped_order = 0
        
        # ‚úÖ –ú–µ–∂–±–∏—Ä–∂–µ–≤–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂
        for asset, price_list in price_map.items():
            price_list.sort(key=lambda x: x[1])
            if len(price_list) > 1:
                low_exchange, low_price = price_list[0]
                high_exchange, high_price = price_list[-1]
                if low_price == 0:
                    continue
                spread = (high_price - low_price) / low_price * 100

               # logging.info(f"üìä {asset}: –ú–∏–Ω —Ü–µ–Ω–∞ {low_price} ({low_exchange}), –ú–∞–∫—Å —Ü–µ–Ω–∞ {high_price} ({high_exchange}) -> –°–ø—Ä–µ–¥: {spread:.2f}%")

                if spread >= 3:
                   # logging.info(f"üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å {asset} -> {low_exchange}, {high_exchange}")
                    if check_liquidity(asset, low_exchange, db) and check_liquidity(asset, high_exchange, db):
                       # logging.info(f"‚ö° –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏—Å–∫–∏ {asset} -> {low_exchange}, {high_exchange}")
                        if check_risk(asset, low_exchange, high_exchange, low_price, high_price):
                            impact_buy = estimate_price_impact(db, low_exchange, asset, "buy", amount_usdt=100)
                            impact_sell = estimate_price_impact(db, high_exchange, asset, "sell", amount_usdt=100)
                            if impact_buy < 1.5 and impact_sell < 1.5:
                                signal = ArbitrageSignal(
                                    asset=asset,
                                    buy_exchange=low_exchange,
                                    sell_exchange=high_exchange,
                                    buy_price=low_price,
                                    sell_price=high_price,
                                    spread=spread,
                                    type="–º–µ–∂–±–∏—Ä–∂–µ–≤–æ–π",
                                    timestamp=datetime.utcnow()
                                )
                                signals.append(signal)
                            else:                            
                                skipped_order += 1
                                #logging.info(f"‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π price impact: BUY {impact_buy:.2f}% / SELL {impact_sell:.2f}%")
                        else:
                            skipped_risk += 1
                          #  logging.info(f"‚ùå –û—Ç–∫–∞–∑ –∏–∑-–∑–∞ —Ä–∏—Å–∫–∞: {asset}")
                    else:
                        skipped_liquidity += 1
                       # logging.info(f"‚ùå –û—Ç–∫–∞–∑ –∏–∑-–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {asset}")
                else:
                    skipped_spread += 1
                   # logging.info(f"‚õî –°–ø—Ä–µ–¥ –Ω–∏–∂–µ 1%: {asset} -> {spread:.2f}%")

       

      
    
        for signal in signals:
            log_message = (
                f"–ê—Ä–±–∏—Ç—Ä–∞–∂: {signal.asset} | –ö—É–ø–∏—Ç—å –Ω–∞ {signal.buy_exchange} –∑–∞ {signal.buy_price} | "
                f"–ü—Ä–æ–¥–∞—Ç—å –Ω–∞ {signal.sell_exchange} –∑–∞ {signal.sell_price} | –ü—Ä–æ—Ñ–∏—Ç: {signal.spread:.2f}% "
                f"| –¢–∏–ø: {signal.type}"
            )
           # logging.info(f"‚úÖ {log_message}")

            existing = db.query(ArbitrageSignal).filter(
                ArbitrageSignal.asset == signal.asset,
                ArbitrageSignal.buy_exchange == signal.buy_exchange,
                ArbitrageSignal.sell_exchange == signal.sell_exchange
            ).first()

            if signal.spread >= MIN_SPREAD:
                if existing:
                    existing.buy_price = signal.buy_price
                    existing.sell_price = signal.sell_price
                    existing.spread = signal.spread
                    existing.timestamp = signal.timestamp
                    updated_signals += 1
                   # logging.info(f"üîÅ –û–±–Ω–æ–≤–ª—ë–Ω —Å–∏–≥–Ω–∞–ª: {signal.asset} | –°–ø—Ä–µ–¥: {signal.spread:.2f}%")
                else:
                    db.add(signal)
                   # logging.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: {signal.asset} | –°–ø—Ä–µ–¥: {signal.spread:.2f}%")
            else:
                if existing:
                    db.delete(existing)
                    deleted_signals += 1
                   # logging.info(f"‚ùå –£–¥–∞–ª—ë–Ω —Å–∏–≥–Ω–∞–ª: {signal.asset} | –°–ø—Ä–µ–¥ —É–ø–∞–ª –Ω–∏–∂–µ {MIN_SPREAD}% ({signal.spread:.2f}%)")

        db.commit()

        logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        logging.info(f"üìâ –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ —Å–ø—Ä–µ–¥—É: {skipped_spread}")
        logging.info(f"üíß –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏: {skipped_liquidity}")
        logging.info(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É: {skipped_order}")
        logging.info(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ —Ä–∏—Å–∫–∞–º: {skipped_risk}")
        logging.info(f"üîÅ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã: {updated_signals}")
        logging.info(f"‚ùå –£–¥–∞–ª–µ–Ω—ã —Å–∏–≥–Ω–∞–ª—ã: {deleted_signals}")
        logging.info(f"----------------------------------------------------")
        db.close()
        return signals

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ find_arbitrage_opportunities: {e}")
        db.rollback()
        db.close()
        return []

